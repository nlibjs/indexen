import fg from 'fast-glob';
import * as fs from 'fs';
import * as path from 'path';
import * as stream from 'stream';
export interface IndexenProps {
    output?: string,
    include: Array<string>,
    exclude?: Array<string>,
    withoutExtension?: boolean,
}

export const indexen = async (props: IndexenProps) => {
    const writer = createWriter(props.output);
    for await (const line of generateCode(props)) {
        writer.write(`${line}\n`);
    }
    writer.end();
};

const createWriter = (output?: string) => {
    if (output) {
        return fs.createWriteStream(output);
    }
    return new stream.Writable({
        write(chunk: Buffer | string, _, callback) {
            process.stdout.write(chunk);
            callback();
        },
    });
};

export const generateCode = async function* (
    {
        include,
        exclude,
        output,
        withoutExtension,
    }: IndexenProps,
): AsyncGenerator<string> {
    yield '// Generated by @nlib/indexen';
    const cwd = output ? path.dirname(output) : process.cwd();
    const history = new Set<string>();
    for await (const file of fg.stream(include, {cwd, ignore: exclude, absolute: false})) {
        let relativePath = `${file}`;
        if (!relativePath.startsWith('.')) {
            relativePath = `./${relativePath}`;
        }
        if (withoutExtension) {
            relativePath = relativePath.replace(/\.\w+$/, '');
        }
        if (!history.has(relativePath)) {
            yield `export * from '${relativePath}';`;
            history.add(relativePath);
        }
    }
};
